const express = require('express');
const router = express.Router();
const prisma = require('../../prisma/client');
const ApiResponse = require('../../services/ApiResponse');
const AuthMiddleware = require('../../middleware/authMiddleware');

/**
 * GET /medecins/validation-status - Consultation du statut de validation m√©decin
 */
router.get('/',
    AuthMiddleware.authenticate(),
    AuthMiddleware.authorize(['MEDECIN']),
    async (req, res) => {
        try {
            const user = req.user;
            const clientIp = req.ip || req.connection.remoteAddress;

            console.log(`üìã Consultation statut validation: Dr ${user.prenom} ${user.nom} - IP: ${clientIp}`);

            // R√©cup√©ration des informations d√©taill√©es du m√©decin
            const medecin = await prisma.medecin.findUnique({
                where: { userId: user.id },
                select: {
                    id: true,
                    numeroOrdre: true,
                    specialites: true,
                    statutValidation: true,
                    dateValidation: true,
                    motifRejet: true,
                    bio: true,
                    experienceAnnees: true,
                    valideParAdmin: {
                        select: {
                            nom: true,
                            prenom: true,
                            email: true
                        }
                    }
                },
                include: {
                    user: {
                        select: {
                            createdAt: true
                        }
                    }
                }
            });

            if (!medecin) {
                console.log(`‚ùå Profil m√©decin non trouv√© pour: ${user.id}`);
                return ApiResponse.notFound(res, 'Profil m√©decin non trouv√©');
            }

            // Calcul du temps √©coul√© depuis la demande
            const createdAt = medecin.user.createdAt;
            const timeElapsed = Math.floor((new Date() - createdAt) / (1000 * 60 * 60)); // en heures

            // Pr√©paration des informations contextuelles selon le statut
            let statusInfo = {};
            let nextSteps = [];
            let estimatedTime = null;

            switch (medecin.statutValidation) {
                case 'EN_ATTENTE':
                    statusInfo = {
                        message: 'Votre compte m√©decin est en cours de validation par notre √©quipe administrative.',
                        description: 'Nous v√©rifions actuellement vos documents et informations professionnelles.',
                        priority: 'NORMALE',
                        canPractice: false
                    };
                    nextSteps = [
                        'Patientez pendant la validation de votre dossier',
                        'V√©rifiez que tous vos documents sont bien lisibles',
                        'Vous recevrez un email de confirmation une fois valid√©',
                        'En cas de probl√®me, nous vous contacterons directement'
                    ];
                    estimatedTime = timeElapsed < 24 ? `${24 - timeElapsed}h restantes (estimation)` : 'Validation en cours, sous 48h';
                    break;

                case 'VALIDE':
                    statusInfo = {
                        message: 'F√©licitations ! Votre compte m√©decin est valid√© et actif.',
                        description: 'Vous pouvez maintenant exercer pleinement sur la plateforme.',
                        priority: 'VALID√â',
                        canPractice: true
                    };
                    nextSteps = [
                        'Compl√©tez votre profil si n√©cessaire',
                        'Configurez vos disponibilit√©s',
                        'Commencez √† recevoir des demandes de rendez-vous',
                        'G√©rez votre agenda m√©dical'
                    ];
                    break;

                case 'REJETE':
                    statusInfo = {
                        message: 'Votre demande de validation a √©t√© rejet√©e.',
                        description: 'Des √©l√©ments de votre dossier n√©cessitent des corrections ou compl√©ments.',
                        priority: 'URGENT',
                        canPractice: false
                    };
                    nextSteps = [
                        'Consultez le motif de rejet ci-dessous',
                        'Corrigez les √©l√©ments mentionn√©s',
                        'Contactez notre √©quipe pour resoumission',
                        'Pr√©parez les documents compl√©mentaires si n√©cessaire'
                    ];
                    break;
            }

            // Informations de contact
            const contactInfo = {
                email: 'validation@medecins-patients.ci',
                telephone: '+225 XX XX XX XX',
                horaires: 'Lundi-Vendredi 8h-17h'
            };

            // Documents requis pour validation
            const documentsRequired = [
                {
                    type: 'Dipl√¥me de m√©decine',
                    description: 'Copie certifi√©e conforme du dipl√¥me',
                    required: true
                },
                {
                    type: 'Certificat d\'inscription √† l\'Ordre',
                    description: 'Certificat d\'inscription √† l\'Ordre des M√©decins de C√¥te d\'Ivoire',
                    required: true
                },
                {
                    type: 'Pi√®ce d\'identit√©',
                    description: 'Copie de la carte nationale d\'identit√© ou passeport',
                    required: true
                },
                {
                    type: 'Certificats de sp√©cialisation',
                    description: 'Si applicable, certificats de sp√©cialit√©s m√©dicales',
                    required: false
                }
            ];

            // Pr√©paration de la r√©ponse
            const responseData = {
                validationStatus: {
                    current: medecin.statutValidation,
                    dateValidation: medecin.dateValidation,
                    motifRejet: medecin.motifRejet,
                    timeElapsed: `${timeElapsed}h`,
                    estimatedTime,
                    statusInfo
                },
                medecinInfo: {
                    id: medecin.id,
                    numeroOrdre: medecin.numeroOrdre,
                    specialites: medecin.specialites,
                    bio: medecin.bio,
                    experienceAnnees: medecin.experienceAnnees
                },
                validationDetails: {
                    nextSteps,
                    documentsRequired,
                    contactInfo
                }
            };

            // Ajouter informations de validation si disponibles
            if (medecin.statutValidation === 'VALIDE' && medecin.valideParAdmin) {
                responseData.validationDetails.validatedBy = {
                    nom: medecin.valideParAdmin.nom,
                    prenom: medecin.valideParAdmin.prenom,
                    email: medecin.valideParAdmin.email
                };
            }

            // Informations additionnelles selon le statut
            if (medecin.statutValidation === 'REJETE') {
                responseData.rejectionDetails = {
                    motif: medecin.motifRejet || 'Motif non sp√©cifi√©',
                    actions: [
                        'Corriger les documents mentionn√©s',
                        'Contacter l\'√©quipe de validation',
                        'Resoummettre le dossier complet'
                    ],
                    urgency: 'HAUTE'
                };
            }

            if (medecin.statutValidation === 'EN_ATTENTE') {
                responseData.waitingDetails = {
                    queuePosition: 'Information non disponible',
                    averageProcessingTime: '24-48 heures',
                    workingDays: 'Lundi-Vendredi',
                    holidays: 'Traitement suspendu les weekends et jours f√©ri√©s'
                };
            }

            console.log(`‚úÖ Statut consult√©: Dr ${user.prenom} ${user.nom} - Statut: ${medecin.statutValidation}`);

            return ApiResponse.success(res, 'Statut de validation r√©cup√©r√©', responseData);

        } catch (error) {
            console.error('‚ùå Erreur consultation statut validation:', error);
            return ApiResponse.serverError(res, 'Erreur lors de la consultation du statut');
        }
    }
);

module.exports = router;